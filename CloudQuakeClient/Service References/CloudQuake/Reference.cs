//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace CloudQuakeClient.CloudQuake {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuakeMessage", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    public partial class QuakeMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double DepthField;
        
        private double DipField;
        
        private string EventIDField;
        
        private string FaultTypeField;
        
        private string FlagField;
        
        private double LatField;
        
        private double LonField;
        
        private double MagnitudeField;
        
        private string StationCodeField;
        
        private string StationsGroupField;
        
        private double StressField;
        
        private double StrikeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Depth {
            get {
                return this.DepthField;
            }
            set {
                if ((this.DepthField.Equals(value) != true)) {
                    this.DepthField = value;
                    this.RaisePropertyChanged("Depth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Dip {
            get {
                return this.DipField;
            }
            set {
                if ((this.DipField.Equals(value) != true)) {
                    this.DipField = value;
                    this.RaisePropertyChanged("Dip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID {
            get {
                return this.EventIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EventIDField, value) != true)) {
                    this.EventIDField = value;
                    this.RaisePropertyChanged("EventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FaultType {
            get {
                return this.FaultTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FaultTypeField, value) != true)) {
                    this.FaultTypeField = value;
                    this.RaisePropertyChanged("FaultType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Flag {
            get {
                return this.FlagField;
            }
            set {
                if ((object.ReferenceEquals(this.FlagField, value) != true)) {
                    this.FlagField = value;
                    this.RaisePropertyChanged("Flag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lon {
            get {
                return this.LonField;
            }
            set {
                if ((this.LonField.Equals(value) != true)) {
                    this.LonField = value;
                    this.RaisePropertyChanged("Lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Magnitude {
            get {
                return this.MagnitudeField;
            }
            set {
                if ((this.MagnitudeField.Equals(value) != true)) {
                    this.MagnitudeField = value;
                    this.RaisePropertyChanged("Magnitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationCode {
            get {
                return this.StationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.StationCodeField, value) != true)) {
                    this.StationCodeField = value;
                    this.RaisePropertyChanged("StationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StationsGroup {
            get {
                return this.StationsGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.StationsGroupField, value) != true)) {
                    this.StationsGroupField = value;
                    this.RaisePropertyChanged("StationsGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Stress {
            get {
                return this.StressField;
            }
            set {
                if ((this.StressField.Equals(value) != true)) {
                    this.StressField = value;
                    this.RaisePropertyChanged("Stress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Strike {
            get {
                return this.StrikeField;
            }
            set {
                if ((this.StrikeField.Equals(value) != true)) {
                    this.StrikeField = value;
                    this.RaisePropertyChanged("Strike");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudQuake.IStorage")]
    public interface IStorage {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStorage/DoWork", ReplyAction="http://tempuri.org/IStorage/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        string EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStorage/AddEventMessage", ReplyAction="http://tempuri.org/IStorage/AddEventMessageResponse")]
        System.IAsyncResult BeginAddEventMessage(CloudQuakeClient.CloudQuake.QuakeMessage quake, System.AsyncCallback callback, object asyncState);
        
        bool EndAddEventMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IStorage/GetStationPartitions", ReplyAction="http://tempuri.org/IStorage/GetStationPartitionsResponse")]
        System.IAsyncResult BeginGetStationPartitions(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetStationPartitions(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStorageChannel : CloudQuakeClient.CloudQuake.IStorage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddEventMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddEventMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStationPartitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStationPartitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StorageClient : System.ServiceModel.ClientBase<CloudQuakeClient.CloudQuake.IStorage>, CloudQuakeClient.CloudQuake.IStorage {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddEventMessageDelegate;
        
        private EndOperationDelegate onEndAddEventMessageDelegate;
        
        private System.Threading.SendOrPostCallback onAddEventMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStationPartitionsDelegate;
        
        private EndOperationDelegate onEndGetStationPartitionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetStationPartitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public StorageClient() {
        }
        
        public StorageClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StorageClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StorageClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StorageClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<DoWorkCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<AddEventMessageCompletedEventArgs> AddEventMessageCompleted;
        
        public event System.EventHandler<GetStationPartitionsCompletedEventArgs> GetStationPartitionsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudQuakeClient.CloudQuake.IStorage.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string CloudQuakeClient.CloudQuake.IStorage.EndDoWork(System.IAsyncResult result) {
            return base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CloudQuakeClient.CloudQuake.IStorage)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            string retVal = ((CloudQuakeClient.CloudQuake.IStorage)(this)).EndDoWork(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new DoWorkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudQuakeClient.CloudQuake.IStorage.BeginAddEventMessage(CloudQuakeClient.CloudQuake.QuakeMessage quake, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddEventMessage(quake, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool CloudQuakeClient.CloudQuake.IStorage.EndAddEventMessage(System.IAsyncResult result) {
            return base.Channel.EndAddEventMessage(result);
        }
        
        private System.IAsyncResult OnBeginAddEventMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CloudQuakeClient.CloudQuake.QuakeMessage quake = ((CloudQuakeClient.CloudQuake.QuakeMessage)(inValues[0]));
            return ((CloudQuakeClient.CloudQuake.IStorage)(this)).BeginAddEventMessage(quake, callback, asyncState);
        }
        
        private object[] OnEndAddEventMessage(System.IAsyncResult result) {
            bool retVal = ((CloudQuakeClient.CloudQuake.IStorage)(this)).EndAddEventMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddEventMessageCompleted(object state) {
            if ((this.AddEventMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddEventMessageCompleted(this, new AddEventMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddEventMessageAsync(CloudQuakeClient.CloudQuake.QuakeMessage quake) {
            this.AddEventMessageAsync(quake, null);
        }
        
        public void AddEventMessageAsync(CloudQuakeClient.CloudQuake.QuakeMessage quake, object userState) {
            if ((this.onBeginAddEventMessageDelegate == null)) {
                this.onBeginAddEventMessageDelegate = new BeginOperationDelegate(this.OnBeginAddEventMessage);
            }
            if ((this.onEndAddEventMessageDelegate == null)) {
                this.onEndAddEventMessageDelegate = new EndOperationDelegate(this.OnEndAddEventMessage);
            }
            if ((this.onAddEventMessageCompletedDelegate == null)) {
                this.onAddEventMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddEventMessageCompleted);
            }
            base.InvokeAsync(this.onBeginAddEventMessageDelegate, new object[] {
                        quake}, this.onEndAddEventMessageDelegate, this.onAddEventMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CloudQuakeClient.CloudQuake.IStorage.BeginGetStationPartitions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStationPartitions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> CloudQuakeClient.CloudQuake.IStorage.EndGetStationPartitions(System.IAsyncResult result) {
            return base.Channel.EndGetStationPartitions(result);
        }
        
        private System.IAsyncResult OnBeginGetStationPartitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CloudQuakeClient.CloudQuake.IStorage)(this)).BeginGetStationPartitions(callback, asyncState);
        }
        
        private object[] OnEndGetStationPartitions(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((CloudQuakeClient.CloudQuake.IStorage)(this)).EndGetStationPartitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStationPartitionsCompleted(object state) {
            if ((this.GetStationPartitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStationPartitionsCompleted(this, new GetStationPartitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStationPartitionsAsync() {
            this.GetStationPartitionsAsync(null);
        }
        
        public void GetStationPartitionsAsync(object userState) {
            if ((this.onBeginGetStationPartitionsDelegate == null)) {
                this.onBeginGetStationPartitionsDelegate = new BeginOperationDelegate(this.OnBeginGetStationPartitions);
            }
            if ((this.onEndGetStationPartitionsDelegate == null)) {
                this.onEndGetStationPartitionsDelegate = new EndOperationDelegate(this.OnEndGetStationPartitions);
            }
            if ((this.onGetStationPartitionsCompletedDelegate == null)) {
                this.onGetStationPartitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStationPartitionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetStationPartitionsDelegate, null, this.onEndGetStationPartitionsDelegate, this.onGetStationPartitionsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CloudQuakeClient.CloudQuake.IStorage CreateChannel() {
            return new StorageClientChannel(this);
        }
        
        private class StorageClientChannel : ChannelBase<CloudQuakeClient.CloudQuake.IStorage>, CloudQuakeClient.CloudQuake.IStorage {
            
            public StorageClientChannel(System.ServiceModel.ClientBase<CloudQuakeClient.CloudQuake.IStorage> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DoWork", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddEventMessage(CloudQuakeClient.CloudQuake.QuakeMessage quake, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = quake;
                System.IAsyncResult _result = base.BeginInvoke("AddEventMessage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddEventMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddEventMessage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStationPartitions(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetStationPartitions", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetStationPartitions(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetStationPartitions", _args, result)));
                return _result;
            }
        }
    }
}
